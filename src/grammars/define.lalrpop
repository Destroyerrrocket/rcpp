use crate::grammars::defineast::{*};
use crate::utils::pretoken::{*};
use crate::utils::pretoken::PreToken::{*};
use crate::utils::pretoken::PreprocessingOperator;

grammar;

pub DefineStmt = <Define>;

#[inline]
Define: Vec<PreTokenDefine> = {
	Elem* => <>
};

Elem: PreTokenDefine = {
	<ArgMVar> => <>,
	Hash Whitespace* <ArgMVar> => PreTokenDefine::Hash(Box::new(<>)),
	<to: ReTokNoWhiteSp> HashHash Whitespace* <arg: ArgMVar> => PreTokenDefine::HashHash(Box::new(to), Box::new(arg)),
	<arg: ArgMVar> HashHash Whitespace* <to: ReTokNoWhiteSp> => PreTokenDefine::HashHash(Box::new(arg), Box::new(to)),
	VariadicOpt Whitespace* VariadicOptParenL <Define> VariadicOptParenR => PreTokenDefine::VariadicOpt(<>.into_iter().map(|x| Box::new(x)).collect::<Vec<Box<PreTokenDefine>>>()),
	<ReTokNormal> => <>,
}

ArgMVar: PreTokenDefine = {
	<Arg> => PreTokenDefine::Arg(<>),
	<VariadicArg> => PreTokenDefine::VariadicArg,
}

ReTokNoWhiteSp: PreTokenDefine = {
	<HeaderName> => PreTokenDefine::Normal(PreToken::HeaderName(<>)),
	<Ident> => PreTokenDefine::Normal(PreToken::Ident(<>)),
	<PreprocessingOperator> => PreTokenDefine::Normal(PreToken::PreprocessingOperator(<>)),
	<OperatorPunctuator> => PreTokenDefine::Normal(PreToken::OperatorPunctuator(<>)),
	<Keyword> => PreTokenDefine::Normal(PreToken::Keyword(<>)),
	<StringLiteral> => PreTokenDefine::Normal(PreToken::StringLiteral(<>)),
	<UdStringLiteral> => PreTokenDefine::Normal(PreToken::UdStringLiteral(<>)),
	<RawStringLiteral> => PreTokenDefine::Normal(PreToken::RawStringLiteral(<>)),
	<CharLiteral> => PreTokenDefine::Normal(PreToken::CharLiteral(<>)),
	<UdCharLiteral> => PreTokenDefine::Normal(PreToken::UdCharLiteral(<>)),
	<PPNumber> => PreTokenDefine::Normal(PreToken::PPNumber(<>)),
	<Unknown> => PreTokenDefine::Normal(PreToken::Unknown(<>)),
}

ReTokNormal: PreTokenDefine = {
	<HeaderName> => PreTokenDefine::Normal(PreToken::HeaderName(<>)),
	<Ident> => PreTokenDefine::Normal(PreToken::Ident(<>)),
	<PreprocessingOperator> => PreTokenDefine::Normal(PreToken::PreprocessingOperator(<>)),
	<OperatorPunctuator> => PreTokenDefine::Normal(PreToken::OperatorPunctuator(<>)),
	<Keyword> => PreTokenDefine::Normal(PreToken::Keyword(<>)),
	<Whitespace> => PreTokenDefine::Normal(PreToken::Whitespace(<>)),
	<StringLiteral> => PreTokenDefine::Normal(PreToken::StringLiteral(<>)),
	<UdStringLiteral> => PreTokenDefine::Normal(PreToken::UdStringLiteral(<>)),
	<RawStringLiteral> => PreTokenDefine::Normal(PreToken::RawStringLiteral(<>)),
	<CharLiteral> => PreTokenDefine::Normal(PreToken::CharLiteral(<>)),
	<UdCharLiteral> => PreTokenDefine::Normal(PreToken::UdCharLiteral(<>)),
	<PPNumber> => PreTokenDefine::Normal(PreToken::PPNumber(<>)),
	<Unknown> => PreTokenDefine::Normal(PreToken::Unknown(<>)),
}

WhiteComTok = {
	Whitespace
}

extern {
	type Location = usize;
	type Error = ();

	enum PreTokenDefinePreParse {
		HeaderName => PreTokenDefinePreParse::Normal(PreToken::HeaderName(<String>)),
		Ident => PreTokenDefinePreParse::Normal(PreToken::Ident(<String>)),
		PreprocessingOperator => PreTokenDefinePreParse::Normal(PreToken::PreprocessingOperator(<PreprocessingOperator>)),
		OperatorPunctuator => PreTokenDefinePreParse::Normal(PreToken::OperatorPunctuator(<&'static str>)),
		Keyword => PreTokenDefinePreParse::Normal(PreToken::Keyword(<&'static str>)),
		Newline => PreTokenDefinePreParse::Normal(PreToken::Newline),
		Whitespace => PreTokenDefinePreParse::Normal(PreToken::Whitespace(<WhiteCom>)),
		StringLiteral => PreTokenDefinePreParse::Normal(PreToken::StringLiteral(<String>)),
		UdStringLiteral => PreTokenDefinePreParse::Normal(PreToken::UdStringLiteral(<String>)),
		RawStringLiteral => PreTokenDefinePreParse::Normal(PreToken::RawStringLiteral(<String>)),
		CharLiteral => PreTokenDefinePreParse::Normal(PreToken::CharLiteral(<String>)),
		UdCharLiteral => PreTokenDefinePreParse::Normal(PreToken::UdCharLiteral(<String>)),
		PPNumber => PreTokenDefinePreParse::Normal(PreToken::PPNumber(<String>)),
		Unknown => PreTokenDefinePreParse::Normal(PreToken::Unknown(<String>)),
		Arg => PreTokenDefinePreParse::Arg(<String>),
		Hash => PreTokenDefinePreParse::Hash,
		HashHash => PreTokenDefinePreParse::HashHash,
		VariadicArg => PreTokenDefinePreParse::VariadicArg,
		VariadicOpt => PreTokenDefinePreParse::VariadicOpt,
		VariadicOptParenL => PreTokenDefinePreParse::VariadicOptParenL,
		VariadicOptParenR => PreTokenDefinePreParse::VariadicOptParenR,
	}
}
