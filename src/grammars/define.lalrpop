use crate::grammars::defineast::{*};
use crate::utils::structs::{*};
use crate::utils::pretoken::{*};
use crate::utils::pretoken::PreToken::{*};
use crate::utils::pretoken::PreprocessingOperator;
use std::sync::Arc;

grammar;

pub DefineStmt = <Define>;

#[inline]
Define: Vec<PreTokenDefine> = {
	Elem* => <>
};

Elem: PreTokenDefine = {
	<ArgMVar> => <>,
	Hash Whitespace* <ArgMVar> => PreTokenDefine::Hash(Box::new(<>)),
	<to: ReTokNoWhiteSp> HashHash Whitespace* <arg: ArgMVar> => PreTokenDefine::HashHash(Box::new(to), Box::new(arg)),
	<arg: ArgMVar> HashHash Whitespace* <to: ReTokNoWhiteSp> => PreTokenDefine::HashHash(Box::new(arg), Box::new(to)),
	VariadicOpt Whitespace* VariadicOptParenL <Define> VariadicOptParenR => PreTokenDefine::VariadicOpt(<>.into_iter().map(|x| Box::new(x)).collect::<Vec<Box<PreTokenDefine>>>()),
	<ReTokNormal> => <>,
}

ArgMVar: PreTokenDefine = {
	<Arg> => PreTokenDefine::Arg(<>),
	<VariadicArg> => PreTokenDefine::VariadicArg,
}

ReTokNoWhiteSp: PreTokenDefine = {
	<l:@L> <t:HeaderName> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::HeaderName(t), end: r.0}}),
	<l:@L> <t:Ident> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::Ident(t), end: r.0}}),
	<l:@L> <t:PreprocessingOperator> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::PreprocessingOperator(t), end: r.0}}),
	<l:@L> <t:OperatorPunctuator> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::OperatorPunctuator(t), end: r.0}}),
	<l:@L> <t:Keyword> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::Keyword(t), end: r.0}}),
	<l:@L> <t:StringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::StringLiteral(t), end: r.0}}),
	<l:@L> <t:UdStringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::UdStringLiteral(t), end: r.0}}),
	<l:@L> <t:RawStringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::RawStringLiteral(t), end: r.0}}),
	<l:@L> <t:CharLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::CharLiteral(t), end: r.0}}),
	<l:@L> <t:UdCharLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::UdCharLiteral(t), end: r.0}}),
	<l:@L> <t:PPNumber> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::PPNumber(t), end: r.0}}),
	<l:@L> <t:Unknown> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos {start: l.0, tok: PreToken::Unknown(t), end: r.0}}),
}

ReTokNormal: PreTokenDefine = {
	<l:@L> <t:HeaderName> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::HeaderName(t), end: r.0}}),
	<l:@L> <t:Ident> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::Ident(t), end: r.0}}),
	<l:@L> <t:PreprocessingOperator> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::PreprocessingOperator(t), end: r.0}}),
	<l:@L> <t:OperatorPunctuator> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::OperatorPunctuator(t), end: r.0}}),
	<l:@L> <t:Keyword> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::Keyword(t), end: r.0}}),
	<l:@L> <t:Whitespace> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::Whitespace(t), end: r.0}}),
	<l:@L> <t:StringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::StringLiteral(t), end: r.0}}),
	<l:@L> <t:UdStringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::UdStringLiteral(t), end: r.0}}),
	<l:@L> <t:RawStringLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::RawStringLiteral(t), end: r.0}}),
	<l:@L> <t:CharLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::CharLiteral(t), end: r.0}}),
	<l:@L> <t:UdCharLiteral> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::UdCharLiteral(t), end: r.0}}),
	<l:@L> <t:PPNumber> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::PPNumber(t), end: r.0}}),
	<l:@L> <t:Unknown> <r:@R> => PreTokenDefine::Normal(FilePreTokPos{file: l.1, tokPos: PreTokPos{start: l.0, tok: PreToken::Unknown(t), end: r.0}}),
}

WhiteComTok = {
	Whitespace
}

extern {
	type Location = (usize, Arc<CompileFile>);
	type Error = ();

	enum PreTokenDefinePreParse {
		HeaderName => PreTokenDefinePreParse::Normal(PreToken::HeaderName(<String>)),
		Ident => PreTokenDefinePreParse::Normal(PreToken::Ident(<String>)),
		PreprocessingOperator => PreTokenDefinePreParse::Normal(PreToken::PreprocessingOperator(<PreprocessingOperator>)),
		OperatorPunctuator => PreTokenDefinePreParse::Normal(PreToken::OperatorPunctuator(<&'static str>)),
		Keyword => PreTokenDefinePreParse::Normal(PreToken::Keyword(<&'static str>)),
		Newline => PreTokenDefinePreParse::Normal(PreToken::Newline),
		Whitespace => PreTokenDefinePreParse::Normal(PreToken::Whitespace(<WhiteCom>)),
		StringLiteral => PreTokenDefinePreParse::Normal(PreToken::StringLiteral(<String>)),
		UdStringLiteral => PreTokenDefinePreParse::Normal(PreToken::UdStringLiteral(<String>)),
		RawStringLiteral => PreTokenDefinePreParse::Normal(PreToken::RawStringLiteral(<String>)),
		CharLiteral => PreTokenDefinePreParse::Normal(PreToken::CharLiteral(<String>)),
		UdCharLiteral => PreTokenDefinePreParse::Normal(PreToken::UdCharLiteral(<String>)),
		PPNumber => PreTokenDefinePreParse::Normal(PreToken::PPNumber(<String>)),
		Unknown => PreTokenDefinePreParse::Normal(PreToken::Unknown(<String>)),
		Arg => PreTokenDefinePreParse::Arg(<String>),
		Hash => PreTokenDefinePreParse::Hash,
		HashHash => PreTokenDefinePreParse::HashHash,
		VariadicArg => PreTokenDefinePreParse::VariadicArg,
		VariadicOpt => PreTokenDefinePreParse::VariadicOpt,
		VariadicOptParenL => PreTokenDefinePreParse::VariadicOptParenL,
		VariadicOptParenR => PreTokenDefinePreParse::VariadicOptParenR,
	}
}
